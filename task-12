#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ll          long long
#define pb          push_back
#define ppb         pop_back
#define endl '\n'
#define mii         map<ll,ll>
#define msi         map<string,ll>
#define mis         map<ll, string>
#define rep(i,a,b)    for(ll i=a;i<b;i++)
#define repr(i,a,b) for(ll i=b-1;i>=a;i--)
#define trav(a, x) for(auto& a : x)
#define pii         pair<ll,ll>
#define vi          vector<ll>
#define vii         vector<pair<ll, ll>>
#define vs          vector<string>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll)x.size()
#define hell        1000000007
#define lbnd        lower_bound
#define ubnd        upper_bound
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)

/* For Debugging */
#define DEBUG cerr<<"\n>>>I'm Here<<<\n"<<endl;
#define display(x) trav(a,x) cout<<a<<" ";cout<<endl;
#define what_is(x)  cerr << #x << " is " << x << endl;

std::mt19937_64 rng(std::chrono::steady_clock::now().time_since_epoch().count());
#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>
#define TIME        cerr << "\nTime elapsed: " << setprecision(5) <<1000.0 * clock() / CLOCKS_PER_SEC << "ms\n";
#define DECIMAL(n)  cout << fixed ; cout << setprecision(n);
#define FAST ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
using namespace __gnu_pbds;
using namespace std;
#define PI 3.141592653589793
#define N  100005
long double b,c;

bool check(long double mid)
{
	long double val = tan(mid)-(mid*mid+b*mid+c)/(2.0*mid+b);
	return val<=0;
}

double func(double x)
{
	double ans=(x*x+b*x+c)/(sin(x));
	return ans;
}

void solve()
{
	// long double a,b;
	cin>>b>>c;
	long double l=1e-8,r=PI/2.0,mid;
	rep(i,0,50)
	{
		mid=(l+r)/2.0;
		if(check(mid))
		l=mid;
		else
		r=mid;
	}
	cout<<func(l)<<endl;
	return;
}

int main()
{
	DECIMAL(10)
	FAST
	int TESTS=1;
	cin>>TESTS;
	while(TESTS--)
	{
		solve();
	}
	TIME
	return 0;
}
